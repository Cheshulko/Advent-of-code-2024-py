#!/usr/bin/env python3

import re
import itertools

re_robot = r"p=(-?\d+),(-?\d+) v=(-?\d+),(-?\d+)"

DIRS = [(-1, 0), (0, 1), (1, 0), (0, -1)]
Grid = list[list[bool]]

def read_and_parse(filename: str) -> list[str]:
    with open(filename, "r", encoding="utf-8") as file:
        return file.read().splitlines()

def is_out(i: int, j: int, grid: Grid) -> bool:
    n = len(grid)
    m = len(grid[0])

    return i < 0 or j < 0 or i >= n or j >= m

def dfs(i: int, j: int, grid: Grid, seen: Grid) -> int:
    seen[i][j] = True

    size = 1
    for di, dj in DIRS:
        to_i, to_j = i + di, j + dj

        if not is_out(to_i, to_j, grid) and not seen[to_i][to_j] and grid[to_i][to_j]:
            size += dfs(to_i, to_j, grid, seen)

    return size

def solve_part_1(input: list[str], h, w, time):
    robot_matcher = re.compile(re_robot)

    quadrants = [[0 for _ in range(2)] for _ in range(2)]

    for line in input:
        if (match := robot_matcher.match(line)) is not None:
            j, i, dj, di = map(int, match.groups())

            final_i = (i + time * di + time * h) % h
            final_j = (j + time * dj + time * w) % w

            if h % 2 and final_i == h // 2:
                continue

            if w % 2 and final_j == w // 2:
                continue

            quadrants[final_i > h // 2][final_j > w // 2] += 1    

    ans = quadrants[0][0] * quadrants[0][1] * quadrants[1][0] * quadrants[1][1]        

    return ans

'''
.........................#...........................................................................
..............................#......................................................................
.....................................................................................#.........#.....
..............................................#.........................................#............
.....................................................................................................
.#.............#.....................................................................................
.....................................................................................................
......#.....#.......................................................#...................#............
#.........................................................................#..........................
..........................................#..........................................................
.....................................................................................................
..............................................................................#................#.....
................................#...#...............#..............................#.................
....................#................................................................................
.......................#........................................................#....................
...........#...........#.....................#.......................................................
...................................................#..........#......................................
..................#...........#...................................................................#..
.....................................................................................................
.................#...........................#.......................................................
................#..#................................#................................................
.....................................................................................................
.....................................................................................................
............................#.#.....###############################..................................
.#..................................#.............................#..................................
....................................#.............................#..................................
...#................................#.............................#..........................#.......
..........................#.........#.............................#...................#..............
....................................#..............#..............#..................................
...............................#....#.............###.............#..................................
....................................#............#####............#..................................
....................................#...........#######...........#......................#........#..
....................................#..........#########..........#............#................#....
....................................#............#####............#........#.........................
....................................#...........#######...........#..................................
.....................#............#.#..........#########..........#.#............................#...
....................................#.........###########.........#..................................
....................................#........#############........#..................................
....................................#..........#########..........#.#..................##............
....................................#.........###########.........#..................................
....................................#........#############........#..................................
......................#.............#.......###############.......#..................................
.......#............................#......#################......#..................................
...........#..#.....................#........#############........#................#.................
....................................#.......###############.......#...........................#......
....................................#......#################......#.....#.................#..........
......#.............................#.....###################.....#..........#.......................
................#...................#....#####################....#...................#..............
..................................#.#.............###.............#..................................
....................................#.............###.............#......#...........................
....................................#.............###.............#..................................
....................................#.............................#..................................
............................#.......#.............................#..................................
....................................#.............................#..................................
...............#....................#.............................#..............#...................
..............#.........#...........###############################.....................#............
...........................#........................................#................................
....................#.....#................#..........................#..............................
............................#........................................................................
...............................................................................................#.....
.........................#......................................#....................................
.........................................................................#...#.......................
............................................#........................................................
.............................................................................#........#..............
.....................................................................................................
.....................................................................................................
...#............................................#..............#.....................................
.....................................................................................................
.....................................................................................................
....................................................................................#............#...
..................................................................#..................................
................................#.......................#............................................
.....................................................................................................
......................#..............................................................................
..............................#............#.........................................................
..............................................................#......................................
................................................................#....................................
......................................#............................#....................#............
.....................................................................................................
.....................................................................................................
.........................................................................#....................#......
....................................#.......#............#.......#.........................#.........
.....................................................................................................
...................................#................................#................................
..........................................................................#..........................
.....................................................................#.........#.................#...
........................................#...........#...................#............................
.................................................................#....#..............................
...........................................#.........................................................
.....................................................................................................
.#....#............................................................................#.................
.........................................................#...........................................
..........................................................................................#..........
...................................#........................................................#........
........................#......................................#..........................#.#........
.......#..................................................................#.........................#
.....................................................................................................
.....................................................................................................
..................................................................#................................#.
.........................................................................#...........................
..........................#..........................................................................
.................................................................#...................................
...........#.........................................................................................
'''
def solve_part_2(input: list[str], h, w):
    robot_matcher = re.compile(re_robot)

    robots = []
    for line in input:
        if (match := robot_matcher.match(line)) is not None:
            robots.append(list(map(int, match.groups())))

    for time in itertools.count():
        grid = [[False for _ in range(w)] for _ in range(h)]

        for robot in robots:
            robot[0] = (robot[0] + robot[2] + w) % w
            robot[1] = (robot[1] + robot[3] + h) % h

            grid[robot[1]][robot[0]] = True

        seen = [[False for _ in range(w)] for _ in range(h)]
        max_comp_size = max(
            itertools.starmap(lambda i, j: dfs(i, j, grid, seen), [
                (i, j) 
                for i in range(h) 
                for j in range(w) 
                if not seen[i][j] and grid[i][j]
            ])
        )
      
        if max_comp_size > 20:
            return time + 1

    assert False


def check():
    input_small = read_and_parse("assets/day14/in_small.txt")

    part_1_answer = solve_part_1(input_small, h = 7, w = 11, time = 100)
    assert part_1_answer == 12

def main():
    input = read_and_parse("assets/day14/in.txt")
    
    part_1_answer = solve_part_1(input, h = 103, w = 101, time = 100)
    print(f"Part 1: {part_1_answer}")
    assert part_1_answer == 228690000
    part_2_answer = solve_part_2(input, h = 103, w = 101)
    print(f"Part 2: {part_2_answer}")
    assert part_2_answer == 7093

if __name__ == "__main__":
    check()
    main()